import datetime
import requests

from mqtt_receive.enums import PostureType
from security_platform import config_parser
from device import models
from event import GenericEventResource
from exceptions import InvalidDeviceCodeError, RequestVASError
from events.models import AlarmEvent, DeviceAlarmEvent, DeployAlarmRecord, PersonDensityRecord, BehaviorAlarmRecord
from websocket_ import ws_queue


class GenericAnalysisEventResource(GenericEventResource):
    """视频分析报警事件"""

    priority = 2
    event_name = '布控报警'
    son_label = 'person_monitor'
    system_code = models.EntranceDevice.BelongSystem.ANALYSIS
    label_name = ('msg', )

    def related_create(self, _):
        pass

    def _set_device(self):
        device_code = self.label['device']['device_code']

        try:
            self._device = models.DeviceInfo.objects.get(device_code=device_code)
        except models.DeviceInfo.DoesNotExist:
            raise InvalidDeviceCodeError(f'不存在的设备编码:{device_code}')

    @property
    def device(self):
        """获取报警设备"""
        if not hasattr(self, '_device'):
            self._set_device()

        return self._device

    @property
    def resource(self):
        """获取对应资源对象

        1.从摄像机对应关系获取
        2.从报警区域字段获取
        """
        return self.device.cameradevice.resource

    def get_time(self):
        """获取时间"""
        return datetime.datetime.fromtimestamp(self.label[self.son_label]['time'])

    def set_label_info(self):
        head_label = self.label['head']
        self.label = self.label['body']

        self._label_info['event_name'] = self.event_name
        self._label_info['event_type'] = AlarmEvent.EventType.DEVICE
        self._label_info['event_code'] = DeviceAlarmEvent.generate_event_code()
        self._label_info['priority'] = self.priority
        self._label_info['event_state'] = DeviceAlarmEvent.EventState.UNCONFIRMED
        self._label_info['alarm_time'] = self.get_time()
        self._label_info['area_code'] = self.resource.name

        # 设备报警字段
        self._label_info['subsystem_event_id'] = head_label['session_id']
        self._label_info['alarm_type'] = self.event_name
        self._label_info['device'] = self.device
        self._label_info['belong_system'] = self.system_code.label

    def create(self):
        objs = super().create()
        related_obj = objs[1]

        if hasattr(related_obj, 'ws_message'):
            ws_queue.put(related_obj.ws_message)


class DeployAnalysisEventResource(GenericAnalysisEventResource):
    """布控报警事件"""

    def related_create(self, event):
        """关联数据创建"""
        users_label = self.label[self.son_label]['similars']['users']
        user = self.get_user_info(users_label['userIdx'])

        return DeployAlarmRecord.objects.create(
            person_db_image_url=users_label['dbImageUrl'],
            snap_image_url=self.label[self.son_label]['imgUrl'],
            score=users_label['score'],
            person_name=user['name'],
            person_sex=user['sex'],
            event=event,
            resource=self.resource
        )

    def get_user_info(self, user_id):
        """获取用户信息"""
        result = requests.get(f'{config_parser.get("VAS", "API_HOST")}/verify/face/gets?imageId={user_id}')
        response_data = result.json()

        if response_data['result'] != 'success':
            raise RequestVASError('获取比对图片失败')

        return response_data['data']


class DensityAnalysisEventResource(GenericAnalysisEventResource):
    """密度报警事件"""

    event_name = '密度报警'
    son_label = 'passenger'

    def related_create(self, event):
        """关联数据创建"""
        return PersonDensityRecord.objects.create(
            total_people_number=self.label[self.son_label]['analyzerResult']['areaNum'],
            density_image_url=self.label[self.son_label]['densityImage'],
            event=event,
            resource=self.resource
        )

    def set_label_info(self):
        super().set_label_info()

        self._label_info['priority'] = self.label[self.son_label]['analyzerResult']['alarmLevel']


class QueueAnalysisEventResource(GenericAnalysisEventResource):
    """排队报警事件"""

    priority = 3
    event_name = '排队报警'
    son_label = 'passenger'


class InvasionAnalysisEventResource(GenericAnalysisEventResource):
    """区域入侵报警事件"""

    priority = 2
    event_name = '区域入侵报警'
    son_label = 'behavior'

    def get_time(self):
        """获取时间"""
        return datetime.datetime.fromtimestamp(self.label[self.son_label]['analyzerResult']['time'])

    def related_create(self, event):
        """关联数据创建"""
        return BehaviorAlarmRecord.objects.create(
            alarm_image_url=self.label[self.son_label]['analyzerResult']['url'],
            event=event,
            resource=self.resource
        )


class BorderAnalysisEventResource(InvasionAnalysisEventResource):
    """越界报警事件"""

    event_name = '越界报警'


class WanderAnalysisEventResource(InvasionAnalysisEventResource):
    """徘徊报警事件"""

    event_name = '徘徊报警'


class RemnantAnalysisEventResource(InvasionAnalysisEventResource):
    """遗留物报警事件"""

    priority = 3
    event_name = '遗留物报警'


class PostureAnalysisEventResource(InvasionAnalysisEventResource):
    """姿态报警事件"""

    priority = 3
    event_name = '姿态动作报警'

    def set_label_info(self):
        super().set_label_info()

        event_name = dict(PostureType.choices)[self.label[self.son_label]['analyzerResult']['motionType']]
        self._label_info['event_name'] = event_name


class PlaceAnalysisEventResource(GenericAnalysisEventResource):
    """机位报警事件"""

    priority = 2
    event_name = '机位报警'
    son_label = 'place'
