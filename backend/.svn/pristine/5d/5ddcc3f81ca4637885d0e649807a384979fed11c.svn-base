from rest_framework import serializers

from security_platform import ErrorType
from operations.models import WatchAddressBook, EntranceAccessRecords
from security_platform.utils.serializer import CustomModelSerializer
from users.models import UserDiary, Department


class WatchAddressBookSerializer(CustomModelSerializer):
    """值班通讯录列表序列化器"""

    class Meta:
        model = WatchAddressBook
        fields = ('department_name', 'staff_name', 'contact_mobile', 'duty_date')
        extra_kwargs = {
            'staff_name': {
                'allow_blank': True,
                'required': False
            },
            'department_name': {
                'required': False
            },
            'contact_mobile': {
                # 'read_only': True,
            },
            'duty_date': {
                'required': False

            },
        }


class EntranceAccessRecordsSerializer(CustomModelSerializer):
    """门禁通行记录列表序列化器"""
    start_time = serializers.DateTimeField(label='开始时间', required=False)
    end_time = serializers.DateTimeField(label='结束时间', required=False)

    class Meta:
        model = EntranceAccessRecords
        fields = ('device_code', 'record_time', 'card_no', 'holder', 'code_name', 'in_out', 'region_id',
                  'device_name', 'start_time', 'end_time')
        extra_kwargs = {
            'holder': {
                'required': False
            },
            'card_no': {
                'required': False
            },
            'device_code': {
                'required': False
            },
            'device_name': {
                'required': False
            },
            'record_time': {
                'read_only': True
            },
            'in_out': {
                'read_only': True
            },
            'region_id': {
                'read_only': True
            },
        }

    def to_representation(self, instance):
        """返回消息处理"""
        data = super().to_representation(instance)

        for key in list(data.keys()):
            value = data[key]
            if value is None:
                data[key] = ''
                value = ''

            if key.find('record_time') != -1:
                data[key] = value.replace('T', ' ').split('.')[0][11:-3]

        return data


class UserDiarySerializer(CustomModelSerializer):
    """用户日志序列化器"""
    start_time = serializers.DateTimeField(label='开始时间', required=False)
    end_time = serializers.DateTimeField(label='结束时间', required=False)
    username = serializers.CharField(label='用户名', required=False)
    department_id = serializers.IntegerField(label='部门ID', required=False)

    class Meta:
        model = UserDiary
        fields = ('diary_id', 'user', 'job_content', 'job_time', 'is_handover', 'handover_user',
                  'handover_content', 'start_time', 'end_time', 'username', 'department_id')
        extra_kwargs = {
            'diary_id': {
                'source': 'id',
                'read_only': True
            },
            'handover_user': {
                'required': False
            },
            'user': {
                'required': False,
                'allow_null': True
            },
            'handover_content': {
                'required': False,
                'allow_blank': True
            },
        }

    def to_representation(self, instance):
        """返回消息处理"""
        data = super().to_representation(instance)

        for key in list(data.keys()):
            value = data[key]
            if value is None:
                data[key] = ''
                value = ''

            if key == 'user':
                data['username'] = instance.user.username if instance.user else ''
                del data[key]
            elif key == 'handover_user':
                data['handover_username'] = instance.handover_user.username if instance.user else ''
                del data[key]
            elif key.find('job_time') != -1:
                data[key] = value.replace('T', ' ').split('.')[0]

        if all([data['username'], data['handover_username']]) and data['is_handover'] is False:
            # 未交接日志交接人和交接内容置空
            if data['username'] == data['handover_username']:
                data['handover_username'] = ''
                data['handover_content'] = ''

        return data

    def validate_department_id(self, department_id):
        """验证部门id"""
        if not Department.objects.filter(id=department_id).exists():
            self.param_error(code=ErrorType.DOES_NOT_EXIST, model_name='部门')

        return department_id

    def create(self, validated_data):
        validated_data = self.validate_create(validated_data)

        return super().create(validated_data)

    def validate_create(self, validated_data):
        """验证参数"""
        handover_user = validated_data.get('handover_user')
        handover_content = validated_data.get('handover_content')
        job_content = validated_data.get('job_content')
        is_handover = validated_data.get('is_handover')
        validated_data['user'] = self.context['request'].user
        if is_handover is None:
            self.param_error(code=ErrorType.NULL, param_name='is_handover')
        if is_handover is True:
            if not handover_user:
                self.param_error(code=ErrorType.BLANK, param_name='handover_user')
            if not handover_content:
                self.param_error(code=ErrorType.BLANK, param_name='handover_content')
            return validated_data
        validated_data['handover_user'] = self.context['request'].user
        if not handover_content:
            validated_data['handover_content'] = job_content
        return validated_data
