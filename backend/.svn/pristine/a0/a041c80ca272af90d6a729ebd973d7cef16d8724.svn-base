from datetime import datetime

from django.db import transaction
from rest_framework import serializers
from rest_framework.permissions import IsAdminUser

from users.models import Department, User
from security_platform import ErrorType, RET
from security_platform.utils.exceptions import PermissionsError
from security_platform.utils.permisssions import IsLeaderUser
from security_platform.utils.serializer import CustomModelSerializer
from devices.models import DeviceInfo, DeviceGroup, DeviceLabel, DeviceMaintenanceRecords, DeviceStateHistory, WorkSheet


class DeviceBasicSerializer(CustomModelSerializer):
    """基础设备信息序列化"""

    class Meta:
        model = DeviceInfo
        fields = ['device_id', 'device_name', 'device_type', 'device_code', 'area_code']
        extra_kwargs = {'device_id': {'source': 'id', 'read_only': True}}


class DeviceStatusSerializer(DeviceBasicSerializer):
    """设备状态设备信息序列化"""

    class Meta(DeviceBasicSerializer.Meta):
        fields = DeviceBasicSerializer.Meta.fields + ['device_state', 'maintenance', 'frequent_maintenance']


class DeviceInfoSerializer(DeviceBasicSerializer):
    """设备状态完整信息序列化"""

    # groups = serializers.SerializerMethodField(label='设备组信息')
    # labels = serializers.SerializerMethodField(label='标签信息')

    class Meta(DeviceBasicSerializer.Meta):
        fields = DeviceBasicSerializer.Meta.fields + ['ipv4', 'port', 'switches']

        # def get_groups(self, device):
        #     return device.group_set.filter(user=self.context['request'].user).values_list('name', flat=True)
        #
        # def get_labels(self, device):
        #     return device.label_set.filter(user=self.context['request'].user).values_list('name', flat=True)


class DeviceQueryParamSerializer(DeviceBasicSerializer):
    """查询参数反序列化"""

    device_code = serializers.CharField(label='设备编码', max_length=200)
    scene = serializers.ChoiceField(choices=DeviceInfo.Scene.values)
    group_id = serializers.IntegerField(label='设备组ID')
    label_id = serializers.IntegerField(label='标签ID')
    exclude_department_id = serializers.IntegerField(label='部门id')
    exclude_user_id = serializers.IntegerField(label='用户id')

    class Meta(DeviceBasicSerializer.Meta):
        fields = DeviceBasicSerializer.Meta.fields + [
            'device_state',
            'scene',
            'group_id',
            'label_id',
            'exclude_department_id',
            'exclude_user_id',
        ]

    def check_permissions(self, has_permission):
        """判断是否拥有权限，无权限则报错"""
        if not has_permission:
            raise PermissionsError()

    def validate_exclude_department_id(self, exclude_department_id):
        """校验部门id"""
        if not Department.objects.filter(id=exclude_department_id).exists():
            self.param_error(code=ErrorType.DOES_NOT_EXIST, model_name='部门')

        self.check_permissions(IsAdminUser().has_permission(self.context['request'], self.context['view']))

        return exclude_department_id

    def validate_exclude_user_id(self, exclude_user_id):
        """校验用户id"""
        try:
            user = User.objects.get(id=exclude_user_id)
        except User.DoesNotExist:
            self.param_error(code=ErrorType.DOES_NOT_EXIST, model_name='用户')
        else:
            # 参数权限校验
            request = self.context['request']
            view = self.context['view']

            user_permission = IsLeaderUser()
            self.check_permissions(user_permission.has_permission(request, view))
            self.check_permissions(user_permission.has_object_permission(request, view, user))

        return exclude_user_id

    def validate_group_id(self, group_id):
        """校验设备组"""
        if not DeviceGroup.objects.filter(id=group_id, user=self.context['request'].user).exists():
            self.param_error(code=ErrorType.DOES_NOT_EXIST, model_name='设备组')

        return group_id

    def validate_label_id(self, label_id):
        """校验设备标签"""
        if not DeviceLabel.objects.filter(id=label_id, user=self.context['request'].user).exists():
            self.param_error(code=ErrorType.DOES_NOT_EXIST, model_name='设备标签')

        return label_id

    def validate(self, attrs):
        """其他参数校验"""
        if 'scene' not in attrs:
            self.param_error(code=ErrorType.REQUIRED, param_name='scene')

        return attrs


class DeviceLabelSerializer(CustomModelSerializer):
    """设备标签序列化器"""

    devices = serializers.ListField(label='设备组设备', write_only=True, child=serializers.IntegerField())

    class Meta:
        model = DeviceLabel
        fields = (
            'device_label_id', 'device_label_name', 'content', 'keywords', 'color', 'user_id', 'devices'
        )
        extra_kwargs = {
            'device_label_id': {
                'source': 'id'
            },
            'device_label_name': {
                'source': 'name'
            },
            'user_id': {
                'source': 'user',
                'required': False,
                'allow_null': True,
            },
        }

    def to_representation(self, instance):
        """返回消息处理"""
        data = super().to_representation(instance)
        for key in list(data.keys()):
            value = data[key]
            if value is None:
                data[key] = ''

            if key == 'user_id':
                # 补充用户名字段
                data['username'] = instance.user.username if instance.user else ''

                if value != self.context["request"].user.id:
                    data.clear()

        return data

    def create(self, validated_data):
        """标签添加设备"""

        devices = validated_data.get('devices')

        if not devices:
            self.param_error(code=ErrorType.BLANK, param_name='devices')

        # 获取添加设备列表
        devices_data = DeviceInfo.objects.only('id').filter(id__in=devices)

        # 验证参数
        if len(devices) != devices_data.count():
            self.param_error(param_name='devices')

        # 验证设备是否属于用户
        for device_info in devices_data:
            if not device_info.is_belong_user(self.context["request"].user):
                self.param_error(code=ErrorType.ID_LIST, param_name='devices', field_name='设备ID')

        return super().create(validated_data)

    def validate_device_label_name(self, device_label_name):
        """校验标签名称重复"""
        if DeviceLabel.objects.filter(name=device_label_name, user=self.context["request"].user).exists():
            self.param_error(code=ErrorType.UNIQUE, param_name=device_label_name, errcode=RET.EXPARAMERR)

        return device_label_name


class DeviceLabelDetachmentsSerializer(CustomModelSerializer):
    """设备标签移除设备序列化器"""

    devices = serializers.ListField(label='设备组设备', write_only=True, child=serializers.IntegerField())

    class Meta:
        model = DeviceLabel
        fields = ('devices',)
        extra_kwargs = {
            'devices': {
                'required': True,
            },
        }

    # noinspection PyUnresolvedReferences
    def update(self, instance, validated_data):
        """标签移除设备"""

        devices = validated_data.get('devices')

        if not devices:
            self.param_error(code=ErrorType.BLANK, param_name='devices')

        # 获取移除设备列表
        devices_data = DeviceInfo.objects.only('id').filter(id__in=devices)
        label_devices = instance.devices.all()
        # 验证参数
        if len(devices) != devices_data.count():
            self.param_error(param_name='devices')

        # 验证设备是否属于用户
        for device_info in devices_data:
            if not device_info.is_belong_user(self.context["request"].user):
                self.param_error(code=ErrorType.ID_LIST, param_name='devices', field_name='设备ID')
            if device_info not in label_devices:
                self.param_error(errcode=RET.EXPARAMERR, code=ErrorType.ID_LIST_DEL,
                                 param_name=device_info.device_name, field_name=DeviceLabel._meta.verbose_name)

        # 移除设备列表
        instance.devices.remove(*devices_data)

        instance = super().update(instance, validated_data={})

        return instance


class DeviceGroupSerializer(CustomModelSerializer):
    """设备分组序列化器"""
    devices = serializers.ListField(label='设备组设备', write_only=True, child=serializers.IntegerField())

    class Meta:
        model = DeviceGroup
        fields = (
            'device_group_id', 'device_group_name', 'description', 'user_id', 'devices'
        )
        extra_kwargs = {
            'device_group_id': {
                'source': 'id',
            },
            'device_group_name': {
                'source': 'name'
            },
            'user_id': {
                'source': 'user',
                'required': False,
                'allow_null': True,
            },
        }

    def to_representation(self, instance):
        """返回消息处理"""
        data = super().to_representation(instance)
        for key in list(data.keys()):
            value = data[key]
            if value is None:
                data[key] = ''

            if key == 'user_id':
                # 补充用户名字段
                data['username'] = instance.user.username if instance.user else ''

                if value != self.context["request"].user.id:
                    data.clear()

        return data

    def create(self, validated_data):
        """设备组添加设备"""

        devices = validated_data.get('devices')

        if not devices:
            self.param_error(code=ErrorType.BLANK, param_name='devices')

        # 获取添加设备列表
        devices_data = DeviceInfo.objects.only('id').filter(id__in=devices)

        # 验证参数
        if len(devices) != devices_data.count():
            self.param_error(param_name='devices')

        # 验证设备是否属于用户
        for device_info in devices_data:
            if not device_info.is_belong_user(self.context["request"].user):
                self.param_error(code=ErrorType.ID_LIST, param_name='devices', field_name='设备ID')
            # 验证设备组和设备是否一对一
            if DeviceGroup.objects.filter(user=self.context["request"].user, devices=device_info).exists():
                self.param_error(errcode=RET.EXPARAMERR, code=ErrorType.ID_LIST_ADD,
                                 param_name=device_info.device_name, field_name=DeviceGroup._meta.verbose_name)

        validated_data['user'] = self.context["request"].user

        return super().create(validated_data)

    def validate_device_group_name(self, device_group_name):
        """校验设备组名称重复"""
        if DeviceGroup.objects.filter(name=device_group_name, user=self.context["request"].user).exists():
            self.param_error(code=ErrorType.UNIQUE, param_name=device_group_name, errcode=RET.EXPARAMERR)

        return device_group_name


class DeviceGroupDetachmentsSerializer(CustomModelSerializer):
    """设备分组移除设备序列化器"""
    devices = serializers.ListField(label='设备组设备', write_only=True, child=serializers.IntegerField())

    class Meta:
        model = DeviceGroup
        fields = ('devices',)
        extra_kwargs = {
            'devices': {
                'required': True,
            },
        }

    # noinspection PyUnresolvedReferences
    def update(self, instance, validated_data):
        """设备组移除设备"""

        devices = validated_data.get('devices')

        if not devices:
            self.param_error(code=ErrorType.BLANK, param_name='devices')

        # 获取移除设备列表
        devices_data = DeviceInfo.objects.only('id').filter(id__in=devices)
        group_devices = instance.devices.all()
        # 验证参数
        if len(devices) != devices_data.count():
            self.param_error(param_name='devices')

        # 验证设备是否属于用户
        for device_info in devices_data:
            if not device_info.is_belong_user(self.context["request"].user):
                self.param_error(code=ErrorType.ID_LIST, param_name='devices', field_name='设备ID')
            if device_info not in group_devices:
                self.param_error(errcode=RET.EXPARAMERR, code=ErrorType.ID_LIST_DEL,
                                 param_name=device_info.device_name, field_name=DeviceGroup._meta.verbose_name)

        # 移除设备列表
        instance.devices.remove(*devices_data)

        instance = super().update(instance, validated_data={})

        return instance


class DeviceBasicsSerializer(CustomModelSerializer):
    """设备基础信息序列化器"""

    group_set = DeviceGroupSerializer(label='设备组列表', many=True, required=False)
    label_set = DeviceLabelSerializer(label='设备标签列表', many=True, required=False)

    class Meta:
        model = DeviceInfo
        fields = (
            'device_id', 'device_name', 'device_type', 'device_code', 'gis_field', 'switches', 'device_state',
            'ipv4', 'port', 'maintenance', 'area_code', 'frequent_maintenance', 'trouble_message', 'trouble_time',
            'group_set', 'label_set',
        )

        extra_kwargs = {
            'device_id': {
                'source': 'id',
            },
            'device_name': {
                'allow_blank': True,
                'required': False
            },
            'device_code': {
                'allow_blank': True,
                'required': False
            },
        }

    def to_representation(self, instance):
        """返回消息处理"""
        data = super().to_representation(instance)
        for key in list(data.keys()):
            value = data[key]
            if value is None:
                data[key] = ''

            if key == 'group_set':
                # 去除空值
                new_value = [group_info for group_info in value if group_info]
                data[key] = new_value

            if key == 'label_set':
                # 去除空值
                new_value = [label_info for label_info in value if label_info]
                data[key] = new_value

        return data


class DeviceVerificationSerializer(CustomModelSerializer):
    """审核设备更新序列化器"""

    class Meta:
        model = DeviceInfo
        fields = ('device_state',)
        extra_kwargs = {'device_state': {'required': False}}

    def update(self, instance, validated_data):
        """设备状态变更  同时记录变更信息"""
        instance = self.validate_device_state(instance)
        with transaction.atomic():
            now_time = datetime.now()
            device_state = DeviceInfo.DeviceState.NORMAL

            instance.device_state = device_state
            instance.update_time = now_time

            # 设备状态变更
            instance.save(update_fields=['device_state', 'update_time'])

            # 设备状态变更记录
            DeviceStateHistory.objects.create(
                device_info=instance,
                device_state=device_state,
                state_change_time=now_time
            )

        return instance

    def validate_device_state(self, instance):
        """校验设备状态是否为故障恢复"""
        if instance.device_state != DeviceInfo.DeviceState.TROUBLE_OFF:
            self.param_error(param_name=instance.device_state, code=ErrorType.DEVICE_STATE)

        return instance


class DeviceGISSerializer(CustomModelSerializer):
    """设备点位更新序列化器"""

    class Meta:
        model = DeviceInfo
        fields = ('gis_field',)
        extra_kwargs = {'gis_field': {'required': True}}


class DeviceGroupLabelSerializer(CustomModelSerializer):
    """设备基础信息更新序列化器"""
    group_ids = serializers.ListField(label='设备组只用于反序列化', write_only=True, child=serializers.IntegerField())
    label_ids = serializers.ListField(label='设备标签只用于反序列化', write_only=True, child=serializers.IntegerField())

    class Meta:
        model = DeviceInfo
        fields = ('group_ids', 'label_ids')
        extra_kwargs = {'group_ids': {'required': True}, 'label_ids': {'required': True}}

    def validate_group_ids(self, group_ids):
        """校验设备组id列表"""

        update_group_queryset = DeviceGroup.objects.filter(id__in=group_ids)

        if len(group_ids) > 1:
            self.param_error(param_name='group_ids')

        if len(group_ids) != update_group_queryset.count():
            self.param_error(param_name='group_ids')

        for group in update_group_queryset:
            if group.user != self.context["request"].user:
                self.param_error(code=ErrorType.ID_LIST, param_name='group_ids', field_name='设备组ID')

        return group_ids

    def validate_label_ids(self, label_ids):
        """校验设备标签id列表"""

        device_label_queryset = DeviceLabel.objects.filter(id__in=label_ids)

        if len(label_ids) != device_label_queryset.count():
            self.param_error(param_name='label_ids')

        for label in device_label_queryset:
            if label.user != self.context["request"].user:
                self.param_error(code=ErrorType.ID_LIST, param_name='label_ids', field_name='标签ID')

        return label_ids

    # noinspection PyUnresolvedReferences
    def update(self, instance, validated_data):
        group_ids = validated_data.get('group_ids')
        label_ids = validated_data.get('label_ids')

        current_group = instance.group_set.all().filter(user=self.context["request"].user)
        current_label = instance.label_set.all().filter(user=self.context["request"].user)
        with transaction.atomic():
            # 更新设备组关系
            if current_group:
                instance.group_set.remove(*current_group)
            instance.group_set.add(*group_ids)

            # 更新设备标签关系
            if current_label:
                instance.label_set.remove(*current_label)
            instance.label_set.add(*label_ids)

        instance = super().update(instance, validated_data)

        return instance


class DeviceMaintenanceRecordsSerializer(CustomModelSerializer):
    """设备设备维修记录序列化器"""
    device_name = serializers.CharField(label='设备名称只用于序列化', required=False)
    device_code = serializers.CharField(label='设备编码只用于序列化', required=False)

    class Meta:
        model = DeviceMaintenanceRecords
        fields = (
            'maintenance_record_id', 'device_id', 'is_change_device', 'operate_time', 'operate_person',
            'operate_records', 'note', 'image', 'device_name', 'device_code', 'work_sheet_id'
        )

        extra_kwargs = {
            'maintenance_record_id': {
                'source': 'id',
            },
            'device_id': {
                'source': 'device_info',
            },
            'work_sheet_id': {
                'source': 'work_sheet',
                'required': False
            },
        }

    def to_representation(self, instance):
        """返回消息处理"""
        data = super().to_representation(instance)
        for key in list(data.keys()):
            value = data[key]
            if value is None:
                data[key] = ''

            if key == 'device_id':
                # 补充设备相关字段
                data['device_name'] = instance.device_info.device_name if instance.device_info else ''
                data['device_code'] = instance.device_info.device_code if instance.device_info else ''
                data['trouble_message'] = instance.device_info.trouble_message if instance.device_info else ''

            if key == 'work_sheet_id':
                # 补充工单相关字段
                data['work_sheet_code'] = instance.work_sheet.work_sheet_code if instance.work_sheet else ''
                data['sheet_state'] = instance.work_sheet.sheet_state if instance.work_sheet else ''

            elif key.find('operate_time') != -1:
                data[key] = value.replace('T', ' ').split('.')[0]

        return data

    def create(self, validated_data):
        """新增维修记录"""
        # 获取设备信息
        device_info = validated_data.get('device_info')

        # 获取设备对应工单，更新工单状态
        work_sheet = WorkSheet.objects.filter(device_info=device_info, sheet_state=WorkSheet.SheetState.ORDERED).first()
        if not work_sheet:
            self.param_error(errmsg='设备{0}不存在接单状态工单信息请重新选择或处理'.format(device_info.device_name))

        work_sheet.sheet_state = WorkSheet.SheetState.DISPOSED
        work_sheet.save()
        # 维修记录添加工单信息
        validated_data['work_sheet'] = work_sheet

        return super().create(validated_data)


class DeviceMaintenanceRecordsListSerializer(CustomModelSerializer):
    """设备设备维修记录列表序列化器"""
    device_name = serializers.CharField(label='设备名称只用于序列化', required=False)
    device_code = serializers.CharField(label='设备编码只用于序列化', required=False)

    class Meta:
        model = DeviceMaintenanceRecords
        fields = (
            'maintenance_record_id', 'device_id', 'is_change_device', 'operate_time', 'operate_person',
            'operate_records', 'note', 'image', 'device_name', 'device_code', 'work_sheet_id'
        )

        extra_kwargs = {
            'maintenance_record_id': {
                'source': 'id',
            },
            'device_id': {
                'source': 'device_info',
            },
            'operate_person': {
                'allow_blank': True,
            },
            'work_sheet_id': {
                'source': 'work_sheet',
                'required': False,
            },

        }

    def to_representation(self, instance):

        """返回消息处理"""

        data = super().to_representation(instance)
        for key in list(data.keys()):
            value = data[key]
            if value is None:
                data[key] = ''

            if key == 'device_id':
                # 补充设备相关字段
                data['device_name'] = instance.device_info.device_name if instance.device_info else ''
                data['device_code'] = instance.device_info.device_code if instance.device_info else ''
                data['trouble_message'] = instance.device_info.trouble_message if instance.device_info else ''

            if key == 'work_sheet_id':
                # 补充工单相关字段
                data['work_sheet_code'] = instance.work_sheet.work_sheet_code if instance.work_sheet else ''
                data['sheet_state'] = instance.work_sheet.sheet_state if instance.work_sheet else ''

            elif key.find('operate_time') != -1:
                data[key] = value.replace('T', ' ').split('.')[0]

        return data


class WorkSheetListSerializer(CustomModelSerializer):
    """工单流程列表序列化器"""
    device_name = serializers.CharField(label='设备名称只用于序列化', required=False)
    device_code = serializers.CharField(label='设备编码只用于序列化', required=False)

    class Meta:
        model = WorkSheet
        fields = (
            'work_sheet_id', 'device_id', 'dispose_user', 'device_name', 'device_code', 'audit_person', 'audit_opinion',
            'sheet_state', 'work_sheet_code'
        )

        extra_kwargs = {
            'work_sheet_id': {
                'source': 'id',
                'read_only': True

            },
            'device_id': {
                'source': 'device_info',
                'required': False
            },
            'work_sheet_code': {
                'required': False
            },
            'dispose_user': {
                'required': False
            },
            'audit_opinion': {
                'required': False,
                'read_only': True
            },

        }

    def to_representation(self, instance):
        """返回消息处理"""
        data = super().to_representation(instance)
        for key in list(data.keys()):
            value = data[key]
            if value is None:
                data[key] = ''

            if key == 'device_id':
                # 补充设备相关字段
                data['device_name'] = instance.device_info.device_name if instance.device_info else ''
                data['device_code'] = instance.device_info.device_code if instance.device_info else ''
                data['trouble_message'] = instance.device_info.trouble_message if instance.device_info else ''

        return data


class WorkSheetCreateSerializer(CustomModelSerializer):
    """工单流程创建序列化器"""
    device_name = serializers.CharField(label='设备名称只用于序列化', required=False)
    device_code = serializers.CharField(label='设备编码只用于序列化', required=False)

    class Meta:
        model = WorkSheet
        fields = (
            'work_sheet_id', 'device_id', 'dispose_user', 'device_name', 'device_code', 'sheet_state', 'work_sheet_code'
        )

        extra_kwargs = {
            'work_sheet_id': {
                'source': 'id',

            },
            'device_id': {
                'source': 'device_info',
            },
            'work_sheet_code': {
                'required': False
            },

        }

    def to_representation(self, instance):
        """返回消息处理"""
        data = super().to_representation(instance)
        for key in list(data.keys()):
            value = data[key]
            if value is None:
                data[key] = ''

            if key == 'device_id':
                # 补充设备相关字段
                data['device_name'] = instance.device_info.device_name if instance.device_info else ''
                data['device_code'] = instance.device_info.device_code if instance.device_info else ''
                data['trouble_message'] = instance.device_info.trouble_message if instance.device_info else ''

        return data

    def create(self, validated_data):
        """创建工单"""

        # 生成工单编号
        work_sheet_code = WorkSheet.generate_work_sheet_code()
        validated_data['work_sheet_code'] = work_sheet_code
        validated_data['audit_person'] = ''

        return super().create(validated_data)

    def validate(self, attrs):
        """参数校验"""
        device_info = attrs.get('device_info')

        # 查询设备对应是否有正在处理未关闭的工单
        work_sheet_data = WorkSheet.objects.filter(device_info=device_info).exclude(
            sheet_state=WorkSheet.SheetState.CLOSED)

        if work_sheet_data:
            self.param_error(errmsg='设备{0}存在未关闭的工单请重新选择或处理'.format(device_info.device_name))

        return attrs


class WorkSheetUpdateSerializer(CustomModelSerializer):
    """工单修改序列化器"""

    class Meta:
        model = WorkSheet
        fields = (
            'dispose_user', 'audit_person', 'sheet_state', 'device_id'
        )

        extra_kwargs = {
            # 修改工单是否添加审核人待确认，先保留
            'audit_person': {
                'required': True,
                'allow_blank': False,
                'allow_null': False,
            },
            'sheet_state': {
                'required': False
            },
            'device_id': {
                'source': 'device_info',
            },
        }

    def update(self, instance, validated_data):
        """修改工单"""
        instance = self.validate_sheet_state(instance)
        # 修改工单状态
        instance.sheet_state = WorkSheet.SheetState.ASSIGNED

        return super().update(instance, validated_data)

    def validate_sheet_state(self, instance):
        """工单状态校验"""
        # 获取当前工单状态
        sheet_state = instance.sheet_state
        # 可修改的工单状态为已处置或已指派
        update_list = [WorkSheet.SheetState.ASSIGNED, WorkSheet.SheetState.DISPOSED]

        if sheet_state not in update_list:
            self.param_error(errmsg="只有状态为已指派或已处置的工单才能修改")

        return instance


class WorkSheetAuditSerializer(CustomModelSerializer):
    """工单审核序列化器"""

    class Meta:
        model = WorkSheet
        fields = (
            'audit_person', 'audit_opinion', 'sheet_state'
        )

        extra_kwargs = {
            'audit_person': {
                'required': True,
                'allow_blank': False,
                'allow_null': False,
            },
            'audit_opinion': {
                'required': True,
                'allow_blank': False,
                'allow_null': False,
            },
            'sheet_state': {
                'required': False
            },

        }

    def update(self, instance, validated_data):
        """修改工单"""
        instance = self.validate_sheet_state(instance)
        # 修改工单状态
        instance.sheet_state = WorkSheet.SheetState.AUDITED

        return super().update(instance, validated_data)

    def validate_sheet_state(self, instance):
        """工单状态校验"""
        # 获取当前工单状态
        sheet_state = instance.sheet_state
        # 可审核的工单状态为已处置
        if sheet_state != WorkSheet.SheetState.DISPOSED:
            self.param_error(errmsg="只有状态为已处置的工单才能审核")

        return instance


class WorkSheetCloseSerializer(CustomModelSerializer):
    """工单关闭序列化器"""

    class Meta:
        model = WorkSheet
        fields = (
            'sheet_state',
        )

        extra_kwargs = {
            'sheet_state': {
                'required': False
            },
        }

    def update(self, instance, validated_data):
        """修改工单状态，同时更新设备状态"""

        instance = self.validate_sheet_state(instance)
        device_info = instance.device_info

        with transaction.atomic():
            # 修改工单状态
            instance.sheet_state = WorkSheet.SheetState.CLOSED

            # 更新设备状态
            device_state = device_info.device_state
            now_time = datetime.now()

            if device_state == DeviceInfo.DeviceState.TROUBLE_OFF:
                device_state = DeviceInfo.DeviceState.NORMAL

                device_info.device_state = device_state
                device_info.update_time = now_time
                device_info.maintenance += 1

                # 设备状态变更,设备维系记录加一
                device_info.save(update_fields=['device_state', 'update_time', 'maintenance'])

        return super().update(instance, validated_data)

    def validate_sheet_state(self, instance):
        """工单状态校验"""
        sheet_state = instance.sheet_state

        # 只有状态为已审核的工单才能关闭
        if sheet_state != WorkSheet.SheetState.AUDITED:
            self.param_error(errmsg="只有状态为已审核的工单才能关闭")

        return instance


class WorkSheetOrderSerializer(CustomModelSerializer):
    """接单序列化器"""

    class Meta:
        model = WorkSheet
        fields = (
            'sheet_state',
        )

        extra_kwargs = {
            'sheet_state': {
                'required': False
            },
        }

    def update(self, instance, validated_data):
        """修改工单状态"""

        instance = self.validate_sheet_state(instance)

        # 修改工单状态为已接单
        instance.sheet_state = WorkSheet.SheetState.ORDERED

        return super().update(instance, validated_data)

    def validate_sheet_state(self, instance):
        """工单状态校验"""
        sheet_state = instance.sheet_state

        # 只有状态为已指派的工单才能接单
        if sheet_state != WorkSheet.SheetState.ASSIGNED:
            self.param_error(errmsg="只有状态为已指派的工单才能接单")

        return instance
