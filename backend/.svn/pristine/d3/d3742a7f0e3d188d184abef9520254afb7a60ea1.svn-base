from django.db import models

from users.models import User, Department
from situations.models import ResourceInfo
from security_platform import TextChoices
from security_platform.utils.models import BaseModel, FilterIsDeletedManager


class DevicePermissionsMixin(models.Model):
    """设备权限混入类

    用于给设备类增加多对多关联及相关权限的校验

    users：关联部门员工或领导的设备权限，部门员工只有跟自身用户关联的设备权限
    department：关联部门的设备权限，部门领导拥有关联部门下的所有设备权限
    """

    users = models.ManyToManyField(
        User,
        verbose_name='关联用户设备权限',
        blank=True,
        related_name="device_set",
        related_query_name="devices"
    )

    departments = models.ManyToManyField(
        Department,
        verbose_name='关联部门设备权限',
        blank=True,
        related_name="device_set",
        related_query_name="devices"
    )

    def is_belong_department(self, department):
        """判断设备是否属于这个部门"""
        return department in self.departments.all()

    def _is_belong_user(self, user):
        """判断设备是否属于这个用户"""
        return user in self.users.all() and self.is_belong_department(user.department)

    def is_belong_user(self, user):
        """判断用户是否拥有这个设备的权限"""
        if user.is_superuser:
            return True

        if not user.is_active:
            return False

        if user.is_leader:
            # 部门领导
            return self.is_belong_department(user.department)
        else:
            # 部门员工
            return self._is_belong_user(user)

    class Meta:
        abstract = True


class DeviceManager(FilterIsDeletedManager):
    """自定义设备模型类查询Manager"""

    @property
    def simple_info(self):
        """快速查询设备信息"""
        device_data = self.all().values('id', 'device_name')

        return device_data


class DeviceInfo(BaseModel, DevicePermissionsMixin):
    """设备信息

    设备故障流程
    1 设备状态变为故障
    2 等待设备状态变为故障恢复
    3 设备状态变为故障恢复后需要领导审核，领导审核后变为正常
    员工任何情况下均可提交设备维修记录，提交后可查看
    """

    FREQUENT_MAINTENANCE_COUNT = 3

    class DeviceState(TextChoices):
        NORMAL = 'normal', '正常'
        TROUBLE_OPEN = 'trouble_open', '故障'
        TROUBLE_OFF = 'trouble_off', '故障恢复'

    class DeviceType(TextChoices):
        CAMERA = 'cctv', '视频监控设备'
        MAINTENANCE = 'enclosure', '围界设备'
        ENTRANCE = 'access_control', '门禁设备'
        FIRE = 'fire', '消防设备'
        CONCEAL = 'alarm', '隐蔽报警设备'
        PASSAGE = 'passage_way', '道口设备'

    class BelongSystem(TextChoices):
        CAMERA = 'VMS', '视频监控系统'
        MAINTENANCE = 'AIS', '围界系统'
        ENTRANCE = 'ACS', '门禁系统'
        FIRE = 'XFHZ', '消防系统'
        CONCEAL = 'YBBJ', '隐蔽报警系统'
        PASSAGE = 'CMS', '道口系统'
        ANALYSIS = 'ZVAMS', '视频分析系统'

    class Scene(TextChoices):
        BASIC = 'basic'
        STATUS = 'status'
        INFO = 'info'

    device_type = models.CharField('类型', max_length=20, choices=DeviceType.choices)
    belong_system = models.CharField('所属系统', max_length=5, choices=BelongSystem.choices, db_index=True)
    device_state = models.CharField('设备状态', max_length=20, choices=DeviceState.choices, default='normal')
    is_deleted = models.BooleanField('逻辑删除', default=False, db_index=True)
    # 业务字段
    device_code = models.CharField('设备编码', max_length=200, unique=True)
    device_name = models.CharField('设备名称', max_length=60, db_index=True)
    device_type_id = models.CharField('设备类型编码', blank=True, max_length=36)
    device_type_id_son = models.CharField('设备子类型编码', blank=True, max_length=36)
    device_type_name = models.CharField('设备类型名称', blank=True, max_length=60)
    area_code = models.CharField('所属区域', blank=True, max_length=20)
    floor_code = models.CharField('所属楼层', blank=True, max_length=20)
    ipv4 = models.CharField('IPv4', max_length=20, blank=True)
    port = models.CharField('端口', max_length=10, blank=True)
    switches = models.CharField('交换机', max_length=30, blank=True)
    manufacturer = models.CharField('厂家', max_length=30, blank=True)
    device_model = models.CharField('型号', max_length=30, blank=True)
    trouble_message = models.CharField('设备故障信息', max_length=30, blank=True)
    trouble_time = models.DateTimeField('设备故障时间', null=True, blank=True)
    trouble_code = models.CharField('设备故障错误码', max_length=30, blank=True)
    install_location_detail = models.CharField('安装位置描述', max_length=60, blank=True)
    device_cad_code = models.CharField('安装工程码', max_length=60, blank=True)
    related_camera_code = models.CharField('关联摄像机编号', max_length=200, blank=True)
    maintenance = models.IntegerField('维修次数', default=0)
    gis_field = models.TextField('gis点位信息', blank=True)

    # 过滤逻辑删除
    objects = DeviceManager()
    # 原始查询, 不过滤逻辑删除
    raw_objects = models.Manager()

    @property
    def frequent_maintenance(self):
        """是否频繁维修设备"""
        return True if self.maintenance > self.FREQUENT_MAINTENANCE_COUNT else False

    class Meta:
        verbose_name = '基础设备信息'
        verbose_name_plural = verbose_name
        db_table = 'tb_device_info'
        index_together = [
            ["is_deleted", "device_type", "device_state"],
            ["is_deleted", "device_state"],
        ]

    def __str__(self):
        return self.device_name


class CameraDevice(DeviceInfo):
    """摄像机设备"""

    # TODO 关于全景相机如何识别，后续可能会根据型号来进行区分，这块再议
    is_panoramic = models.BooleanField('是否全景相机', default=False)
    is_ptz = models.BooleanField('是否支持ptz', default=False)
    resource = models.ForeignKey(ResourceInfo, null=True, blank=True, verbose_name='航站楼资源', on_delete=models.SET_NULL)
    flow_address = models.CharField('流地址', max_length=100, blank=True)
    point_angel = models.IntegerField('指向角度', null=True, blank=True)
    visual_angel = models.IntegerField('视角', null=True, blank=True)
    cover_radius = models.IntegerField('覆盖半径', null=True, blank=True)
    install_height = models.IntegerField('安装高度', null=True, blank=True)

    class Meta:
        verbose_name = '摄象机设备'
        verbose_name_plural = verbose_name
        db_table = 'tb_camera_device'


class MaintenanceDevice(DeviceInfo):
    """围界设备"""

    detector_code = models.CharField('探测器编号', max_length=20, blank=True)
    detector_host_code = models.CharField('探测主机编号', max_length=20, blank=True)

    class Meta:
        verbose_name = '围界设备'
        verbose_name_plural = verbose_name
        db_table = 'tb_maintenance_device'


class EntranceDevice(DeviceInfo):
    """门禁设备"""

    door_code = models.CharField('门代号', max_length=20, blank=True)

    class Meta:
        verbose_name = '门禁设备'
        verbose_name_plural = verbose_name
        db_table = 'tb_entrance_device'


class FireDevice(DeviceInfo):
    """消防设备"""

    class Meta:
        verbose_name = '消防设备'
        verbose_name_plural = verbose_name
        db_table = 'tb_fire_device'


class ConcealAlarmDevice(DeviceInfo):
    """隐蔽报警设备"""

    class Meta:
        verbose_name = '隐蔽报警设备'
        verbose_name_plural = verbose_name
        db_table = 'tb_conceal_alarm_device'


class PassageWayDevice(DeviceInfo):
    """道口设备"""

    class Meta:
        verbose_name = '道口设备'
        verbose_name_plural = verbose_name
        db_table = 'tb_passage_way_device'


class DeviceMaintenanceRecords(models.Model):
    """设备维修记录

    员工维修或更换设备后提交维修记录
    """

    device_info = models.ForeignKey(DeviceInfo, verbose_name='设备', on_delete=models.PROTECT)
    is_change_device = models.BooleanField('是否更换设备', default=False)
    operate_time = models.DateTimeField('维修时间')
    operate_person = models.CharField('维修人', max_length=20)
    operate_records = models.CharField('维修记录', max_length=50)
    note = models.CharField('备注', max_length=50, blank=True)
    image = models.TextField('图片', null=True, blank=True)

    class Meta:
        verbose_name = '设备安装维修记录'
        verbose_name_plural = verbose_name
        db_table = 'tb_device_maintenance_records'


class DeviceStateHistory(models.Model):
    """设备状态变更记录"""

    device_info = models.ForeignKey(DeviceInfo, verbose_name='设备', on_delete=models.CASCADE)
    device_state = models.CharField('设备变更状态', max_length=20)
    state_change_time = models.DateTimeField('设备状态变更时间')

    class Meta:
        verbose_name = '设备状态记录'
        verbose_name_plural = verbose_name
        db_table = 'tb_device_stated_history'


class DeviceGroup(BaseModel):
    """设备分组

    与设备是一对多关系，与用户是一对一关系
    """

    name = models.CharField('分组名称', max_length=50)
    description = models.TextField('分组说明', blank=True)
    user = models.ForeignKey(User, verbose_name='创建用户', on_delete=models.PROTECT)

    # 关联的设备
    devices = models.ManyToManyField(
        DeviceInfo,
        verbose_name='关联设备',
        blank=True,
        related_name="group_set",
        related_query_name="group",
    )

    class Meta:
        verbose_name = '设备分组'
        verbose_name_plural = verbose_name
        db_table = 'tb_device_group'
        unique_together = ['name', 'user']

    def __str__(self):
        return f'{self.user}-{self.name}'


class DeviceLabel(BaseModel):
    """设备标签

    与设备是多对多关系，与用户是一对一关系
    """

    name = models.CharField('标签名称', max_length=50)
    keywords = models.CharField('检索关键字', max_length=50)
    content = models.TextField('标签内容')
    color = models.CharField('标签颜色代码', max_length=10)
    user = models.ForeignKey(User, verbose_name='创建用户', on_delete=models.PROTECT)
    # default_gis_info = models.CharField('默认GIS定位', max_length=100, blank=True)

    # 关联的设备
    devices = models.ManyToManyField(
        DeviceInfo,
        verbose_name='关联设备',
        blank=True,
        related_name="label_set",
        related_query_name="label"
    )

    class Meta:
        verbose_name = '设备标签'
        verbose_name_plural = verbose_name
        db_table = 'tb_device_label'
        unique_together = ['name', 'user']

    def __str__(self):
        return f'{self.user}-{self.name}'
