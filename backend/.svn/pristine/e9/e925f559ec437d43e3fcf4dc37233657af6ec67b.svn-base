"""Mixin逻辑处理的装饰器

装饰器的作用：
1. 消息处理前进行数据根标签解析, 将解析后的数据标签传递给Mixin函数处理。
2. 消息处理完之后的额外业务逻辑处理，比如websocket消息发送等。
"""
import flight
from websocket_ import ws_queue
from security_platform import receive_logger as logger


class GenericDecorator:
    """类装饰器抽象类

    Class Attributes:
        label_name: 数据标签解析元组，元组内元素的顺序是数据标签解析的顺序
    """

    label_name = ()

    def __init__(self, function):
        """初始化执行的函数"""
        self.function = function

    def parse_label(self, msg_content):
        """消息数据标签解析

        通过label_name元组元素顺序进行取值
        Examples：
        msg_content[label_name[0]][label_name[1]][label_name[2]]...

        Args:
            msg_content: 消息数据字典

        Returns:
            msg_content：解析后的数据字典(单条消息处理，比如报警触发)或列表(批量消息处理，比如批量确认处理报警和航班数据)
        """
        for label in self.label_name:
            msg_content = msg_content[label]

        return msg_content

    def __call__(self, msg_content):
        """将解析后数据传递给原函数执行"""
        return self.function(self, self.parse_label(msg_content))


class AlarmTriggerDecorator(GenericDecorator):
    """触发报警装饰器"""

    label_name = ('msg', 'body', 'event')

    def __call__(self, msg_content):
        """将解析后数据传递给原函数执行并发送websocket消息"""
        alarm_event = super().__call__(msg_content)
        ws_queue.put(alarm_event.ws_message)


class AnalysisAlarmTriggerDecorator(AlarmTriggerDecorator):
    """视频分析报警装饰器"""

    label_name = ('msg', )


class AlarmProcessDecorator(GenericDecorator):
    """报警处理装饰器"""

    label_name = ('msg', 'body', 'event_list')

    def __call__(self, msg_content):
        """批量报警处理

        这里的数据标签解析后是一个列表，所以遍历后依次调用Mixin函数进行处理

        Args:
            msg_content: 原始接收消息的数据字典
        """
        alarm_events = self.parse_label(msg_content)

        for event in alarm_events:
            # 捕获异常是为了防止一条消息处理时发送异常，影响其他的数据处理
            try:
                self.function(self, event)
            except Exception:
                logger.error('事件消息处理失败', exc_info=True)


class DeviceDecorator(GenericDecorator):
    """设备装饰器"""

    label_name = ('msg', 'body', 'device')


class DeviceStateDecorator(GenericDecorator):
    """设备状态"""

    label_name = ('msg', 'body', 'device_status')


class EntranceSlotDecorator(GenericDecorator):
    """门禁刷卡记录"""

    label_name = ('msg', 'body', 'entrance_punch')


class PassengerDecorator(GenericDecorator):
    """客流分析消息装饰器"""

    label_name = ('msg', 'body', 'passenger', 'analyzerResult')


class GenericIISDecorator(GenericDecorator):
    """通用航班系统消息装饰器

    Class Attributes:
        label_name: 数据标签解析元组
        label_object: 航班数据标签处理对象，封装了增删改查等数据库操作，传给Mixin函数直接调用对应方法即可
    """

    label_name = ('MSG', 'EXAMPLE')
    label_object = flight.FlightLabelResource

    def __call__(self, msg_content):
        """航班数据批量处理

        航班数据有可能是字典也有可能是列表，如果是字典转成列表后再依次进行处理

        Args:
            msg_content: 原始接收消息数据字典
        """
        label_list = self.parse_label(msg_content)

        if not isinstance(label_list, list):
            label_list = [label_list]

        for label in label_list:
            try:
                self.function(self, self.label_object(label))
            except Exception:
                logger.error('航班信息处理失败', exc_info=True)


class FlightLabelDecorator(GenericIISDecorator):
    """航班系统航班消息装饰器"""

    label_name = ('MSG', 'DFLT')
    label_object = flight.FlightLabelResource


class FlightCompanyLabelDecorator(GenericIISDecorator):
    """航班系统航空公司消息装饰器"""

    label_name = ('MSG', 'AWAY')
    label_object = flight.AirlinesLabelResource


class FlightExceptionDecorator(GenericIISDecorator):
    """航班系统航班异常信息消息装饰器"""

    label_name = ('MSG', 'ABRN')
    label_object = flight.FlightErrorLabelResource


class AirportDecorator(GenericIISDecorator):
    """航班系统机场消息装饰器"""

    label_name = ('MSG', 'APOT')
    label_object = flight.AirportLabelResource
