from rest_framework.filters import BaseFilterBackend


class DeviceObjectPermissionsFilter(BaseFilterBackend):
    """
    设备权限过滤
    """

    def filter_department_user_queryset(self, user, queryset):
        """
        过滤部门用户的设备权限

        Args:
            user:
            queryset:

        Returns:

        """
        if user.is_leader:
            # 部门领导
            return queryset.filter(departments=user.department_id)

        # 部门员工
        return queryset.filter(users=user, departments=user.department_id)

        # user_device_queryset = queryset.filter(users=user)
        # department_device_queryset = queryset.filter(departments=user.department_id)
        #
        # if not user.is_leader:
        #     return user_device_queryset
        #
        # return user_device_queryset.union(department_device_queryset)

    def filter_queryset(self, request, queryset, view):
        """根据用户的级别返回不同查询集

        超级管理员：所有设备
        部门领导：部门设备权限
        部门员工：用户设备权限
        """
        user = request.user

        if user.is_superuser:
            # 超级用户不用过滤
            return queryset

        return self.filter_department_user_queryset(user, queryset)


class DeviceInfoListFilter(BaseFilterBackend):
    """
    根据设备字段进行过滤
    """
    def remove_invalid_fields(self, filter_data):
        """无效字段删除"""
        if 'scene' in filter_data:
            filter_data.pop('scene')

    def fuzzy_fields_transform(self, filter_data):
        """模糊查询字段转化"""
        if 'device_name' in filter_data:
            filter_data['device_name__icontains'] = filter_data.pop('device_name')

    def related_filed_transform(self, filter_data):
        """关系查询字段转化"""
        if 'group_id' in filter_data:
            filter_data['group'] = filter_data.pop('group_id')

        if 'label_id' in filter_data:
            filter_data['label'] = filter_data.pop('label_id')

    def get_filter(self, request, queryset, view):
        filter_data = view.validate_data.copy()
        self.remove_invalid_fields(filter_data)
        self.fuzzy_fields_transform(filter_data)
        self.related_filed_transform(filter_data)

        return filter_data

    def filter_queryset(self, request, queryset, view):
        filter_data = self.get_filter(request, queryset, view)

        if filter_data:
            return queryset.filter(**filter_data)

        return queryset


class DeviceExcludeFilter(BaseFilterBackend):
    """通过用户或部门排除查询集"""

    def filter_queryset(self, request, queryset, view):
        """排除查询集"""
        if 'exclude_department_id' in view.validate_data:
            queryset = queryset.exclude(departments=view.validate_data.pop('exclude_department_id'))

        if 'exclude_user_id' in view.validate_data:
            queryset = queryset.exclude(users=view.validate_data.pop('exclude_user_id'))

        return queryset
