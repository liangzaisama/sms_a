# Generated by Django 2.2.4 on 2021-06-01 10:00

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_leader', models.BooleanField(default=False, verbose_name='部门领导')),
                ('mobile', models.CharField(blank=True, max_length=15, verbose_name='电话')),
                ('scenario', models.TextField(blank=True, verbose_name='自定义场景值(前端传递)')),
                ('staff_name', models.CharField(blank=True, db_index=True, max_length=10, verbose_name='员工姓名')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, verbose_name='逻辑删除')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
            },
            bases=(models.Model, users.models.UserMixin),
            managers=[
                ('objects', users.models.FilterIsDeletedUserManager()),
                ('raw_objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department_name', models.CharField(max_length=20, unique=True, verbose_name='部门名称')),
                ('page_permissions', models.TextField(blank=True, verbose_name='页面权限')),
            ],
            options={
                'verbose_name': '部门',
                'verbose_name_plural': '部门',
                'db_table': 'tb_department',
            },
        ),
        migrations.CreateModel(
            name='UserBacklog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('object_id', models.IntegerField(verbose_name='待办事件对象id')),
                ('description', models.CharField(max_length=50, verbose_name='待办事件描述')),
                ('backlog_type', models.CharField(choices=[('handover', '交接班'), ('work_order_confirm', '设备工单确认'), ('work_order_solve', '设备工单处理'), ('work_order_audit', '设备工单审核'), ('event_confirm', '报警事件确认'), ('event_solve', '报警事件处理'), ('event_audit', '报警事件审核')], max_length=20, verbose_name='待办事件类型')),
            ],
            options={
                'verbose_name': '用户待办事项',
                'verbose_name_plural': '用户待办事项',
                'db_table': 'tb_user_backlog',
            },
        ),
        migrations.CreateModel(
            name='UserDiary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('job_content', models.CharField(max_length=100, verbose_name='工作内容')),
                ('job_time', models.DateTimeField(verbose_name='时间')),
                ('is_handover', models.BooleanField(default=False, verbose_name='是否交接')),
                ('handover_content', models.CharField(max_length=100, verbose_name='交接内容')),
                ('is_confirm', models.BooleanField(default=False, verbose_name='是否确认')),
                ('handover_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='交接用户')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diary', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户日志',
                'verbose_name_plural': '用户日志',
                'db_table': 'tb_user_diary',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='users.Department', verbose_name='部门'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='UserIPWhiteList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('ip_address', models.CharField(max_length=15, verbose_name='授权ip地址')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户ip白名单',
                'verbose_name_plural': '用户ip白名单',
                'db_table': 'tb_user_ip_white_list',
                'unique_together': {('user', 'ip_address')},
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_leader', 'is_staff', 'is_superuser'], name='users_user_is_lead_711761_idx'),
        ),
    ]
